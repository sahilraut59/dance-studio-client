/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import { useControls } from "leva";
import { SkeletonUtils } from "three-stdlib";
import { useAtom } from "jotai";
import { charactersAtom } from "./SocketManager";
import { socket } from "./SocketManager";

export function Avatar({ r, g, b, ...props }) {
  const [characters] = useAtom(charactersAtom);
  console.log(props.animation);
  const { animation } = useControls({
    animation: {
      value: props.animation,
      options: ["Thriller", "Twerk"],
    },
  });

  const group = useRef(null);
  const { scene, materials } = useGLTF("/models/avatar.glb");
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);

  const myMaterial = materials.Wolf3D_Outfit_Top.clone();

  myMaterial.color.r = r;
  myMaterial.color.g = g;
  myMaterial.color.b = b;

  const { nodes } = useGraph(clone);

  // Set the RGB values for the material

  const { animations: thrillerAnimation } = useFBX("/animations/thriller.fbx");
  const { animations: twerkAnimation } = useFBX("/animations/twerk.fbx");
  thrillerAnimation[0].name = "Thriller";
  twerkAnimation[0].name = "Twerk";

  const { actions } = useAnimations(
    [thrillerAnimation[0], twerkAnimation[0]],
    group
  );
  // const [animation, setAnimation] = useState("Twerk");

  useEffect(() => {
    actions[props.animation].reset().play();
    return () => {
      actions[animation]?.fadeOut(0.5);
    };
  }, [animation, characters]);

  useEffect(() => {
    characters.map((character) => {
      if (character.id === socket.id) {
        character.animation = animation;
      }
    });
    socket.emit("animationChanged", characters);
  }, [animation]);

  // useFrame((state, delta) => {
  //   if (animation === "Twerk") {
  //     group.current.rotation.y += delta;
  //     // console.log(group);
  //   }
  // });
  return (
    <group {...props} dispose={null} ref={group}>
      <group rotation-x={-Math.PI / 2}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={myMaterial}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        >
          {/* <meshStandardMaterial color={[r, g, b]} /> */}
        </skinnedMesh>
        <skinnedMesh
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Glasses.geometry}
          material={materials.Wolf3D_Glasses}
          skeleton={nodes.Wolf3D_Glasses.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/avatar.glb");
